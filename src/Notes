What we will need
-Data structures
-Class info, schedules etc
-interface (such as a gui or something like that0
-students, professor admin
this is going to be a better version of "my info"
for instance, maybe something like "what are the required classes for 'core'"
same group all semester
draw.io google umo things
visio will be used in the class
no late submissions unless medical emergency
it's okay to upload code to stack overflow just no copying prewritten code from places, results are an auto F
group projects are 50% of our grade
2 exams 30%
final - 2 hours, cumulative, 20% of our grade

Day Two

Mateo is our TA
Four requirements for UML diagrams for project
1) conceptual class diagrams
2) Use case diagrams
3) Activity

review these in the UML book and get familiar with them.

Design requirements
1) DETAILED class diagrams
 - Cover the design patterns we are using for implementation
2) Sequence diagrams

requirements vs desires

Required - Interface, GUI is not required, but it must have a user interface.
If you want to generate code from a UML tool, great.
Altova is a great tool, has free 30 day trial.


Overall accountability for the project.
Example - Submarine that couldn't go to sea because problems with software.
- blue ribbon committee, and obviously admiral was livid because he couldn't send ships out

Sponsor is very important as well. They are the ones paying you so be sure to meet their needs entirely.
What is the difference between hardware and software?
- Things you can touch, and things you can't.
- primary responsibility.
- DEF'NS SOFTWARE is developed or engineered. It is not manufactured in the classical sense.
- It doesn't wear out.


There are several broad types of software
- system software such as an OS
- Application software such as an applications on computer and phone
- Engineering and scientific software such as Matlab, modeling and analysis.
- Embedded software such as pieces on the mars rovers, software put in to run hardware
- Product line software such as microsoft office
- Web/Mobile applications such as applications run on web and mobile devices
- AI software with game play/robotics etc. such as games and neural networks

Legacy software
- You will not be the only person that writes software that gets deployed. basically it's software
that continues to live through generation and generation of coders.
- Adapted to meet te needs of new computing
- Must be enhanced to implement new business requirements
- Software must be extended to make it interoperable with new systems and databases
- Software must be re-architected to make it viable within a network environment

Software Engineering produces
- Quality software
- Efficient
- Maintainable


DAY THREE

Full requirements and design for requirements.
Partial implementation
- data file for implementation is posted on brightspace
Testing of partial implementation

If we only do mary anns requirements is a C in the class. Go above and beyond
See course information system on D2L
Interview each other to see what we want out of our project. Requirements etc
-- maybe we can do the major chart, and have the blocks that show the class dim out once you've completed them.
-- passwords, login, changes, etc. the datafile given is where we should focus on.
We have to prove to the sponsor that our shit is legit

Stakeholders
Internal  - Boss - Team - Management - Sponsor
Externam  - Customer - government policy provider - shareholder - grant organization

DAY FOUR
Use case diagrams
Class diagrams          - UML BOOK FOR DIAGRAMS
Activity diagrams

software process - very important will be on test two
put group number then submit the file
each person will have their tasks. (each person creates part of the system)
each person will submit things that go to this assignment
- a set of use cases and descriptions of the use cases
- break downs for them as well.
- they will be submitted in PDF form
- Conceptual class diagrams of the classes that define the systems structure.
- Due feb 10th at 11 pm

The essence of practice
Polya suggests
- Understand the problem
-- who has a stake in the solution to the problem?
-- what are the unknowns? what computer am i gonna run it on for example
-- can it be compartmentalized?
-- can the problem be represented graphically?

- Plan the solution
-- what part of the process? DESIGN
-- Have you seen problems like this before? Can you reuse anything?
-- Has a similar problem been solved before?
-- Can subproblems be defined?
-- Can you represent a solution in a manner..?

- Cary out the plan
-- Implementation
-- Does it conform to the plans?
-- Is each component part of the solution provably correct?
--
- Examine result for accuracy
-- Is it possible to tst each component part of the solution
-- Does the solution produce results that conform to the data, functions, and features that are required?

General principles
- The reason it all exists
- Keep it simple
- Maintain the vision
- What you produce, others will consume
- Be open to the future
- Plan ahead for reuse
- Think

Software requirements
- Something that tells us what the system has to do
- What features the system has to deliver

How to document these?
- Natural language
- Formal language (UML) to avoid ambiguity

Requirements Engineering
- The process of establishing the needs of the stakeholder that are solved
-

Requirement engineering
- a set of activities
- concerned with identifying and communicating
- designers need to know how it's going to be used
- the bridge between real world needs and other constituencies affected by a software system
-- and the capabilities
- Inception: what is it that you're trying to build
- Elicitation: when you get the requirements from your stakeholders
- Elaboration: create an analysis model that identifies data, function and behavioral requirements
- Negotiation: agree on a deliverable system that is realistic for developers and customers
- Specification: documents, models, math, use cases, prototype
- Validation: errors in context, areas where clarification is, missing info, inconsistencies
- Requirements management

Eliciting Requirements
- Meetings
- Rules
- Agendas
- Facilitator
- Definition mechanism
- Goal: Identify problem, propose elements of solution, negotiate approace, specify a preliminary solution

Two types of requirements:
-Functional
-- Defines required behavior of the system between outputs and inputs
-- Describes how a product must behave, what its features and function
- Non functional
-- Quality attributes, performance attributes

Good requirements
- Unambiguous
- Testable
- Clear
- Correct
- Understandable
- Feasible
- Independent
- Atomic
- Necessary
- Implementation free

We are only doing functional requirements ***********

FQT - formal qualification testing

















